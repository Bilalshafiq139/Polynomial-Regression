# -*- coding: utf-8 -*-
"""Polynomial Linear Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13fFAGwg9OHHWNSrqM-w7rt4B42IkPUqw

###Assignment 3: Predicting Sales Revenue from Advertising Budget

####**Problem Statement**
Marketing teams often need to predict the return on advertising investments. This model will use polynomial regression to predict sales_revenue based on advertising_budget, capturing nonlinear trends that can reflect the diminishing returns on ad spend.

####**How the Model Will Help**
This model can help marketing departments plan their ad budgets more effectively, ensuring they allocate resources to maximize revenue and avoid unnecessary spending.

####**Data Description**
The dataset contains two columns:
- advertising_budget: The amount spent on advertising in dollars.
- sales_revenue: The resulting sales revenue in dollars.

#### **Instructions**
- Load and Explore: Load the dataset and plot advertising_budget against sales_revenue to observe any nonlinear relationship.
- Feature Transformation: Transform the advertising_budget feature to polynomial terms (e.g., degree 2 or 3).
- Model Training: Split the data into training (80%) and testing (20%) sets, and train a polynomial regression model to predict sales_revenue.
- Visualization: Plot the polynomial regression curve against the actual data points for visualization.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv("polynomial_regression_data.csv")

print(data.head())

plt.scatter(data['advertising_budget'], data['sales_revenue'], color='blue', label='Data points')
plt.xlabel("Advertising Budget ($)")
plt.ylabel("Sales Revenue ($)")
plt.title("Advertising Budget vs Sales Revenue")
plt.legend()
plt.show()

from sklearn.preprocessing import PolynomialFeatures

degree = 2
poly_features = PolynomialFeatures(degree=degree)

X_poly = poly_features.fit_transform(data[['advertising_budget']])

print(f"Original feature: \n{data[['advertising_budget']].head()}")
print(f"Transformed features (degree={degree}): \n{X_poly[:5]}")

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

X = X_poly
y = data['sales_revenue']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-squared Score: {r2}")

X_seq = np.linspace(data['advertising_budget'].min(), data['advertising_budget'].max(), 300).reshape(-1, 1)
X_seq_poly = poly_features.transform(X_seq)
y_seq_pred = model.predict(X_seq_poly)

plt.scatter(data['advertising_budget'], data['sales_revenue'], color='blue', label='Data points')
plt.plot(X_seq, y_seq_pred, color='red', label=f'Polynomial Regression (degree={degree})')
plt.xlabel("Advertising Budget ($)")
plt.ylabel("Sales Revenue ($)")
plt.title("Polynomial Regression: Advertising Budget vs Sales Revenue")
plt.legend()
plt.show()

